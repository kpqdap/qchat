import { CheckIcon, ClipboardIcon } from "lucide-react"
import { FC, memo, useEffect, useState } from "react"
import { Prism } from "react-syntax-highlighter"
import { atomDark } from "react-syntax-highlighter/dist/esm/styles/prism"
import { Button } from "../../features/ui/button"
import { AI_NAME } from "@/features/theme/theme-config"

export const fence = {
  render: "CodeBlock",
  attributes: {
    language: {
      type: String,
    },
    value: {
      type: String,
    },
  },
}

interface Props {
  language: string
  children: string
}

export const CodeBlock: FC<Props> = memo(({ language, children }) => {
  const [isIconChecked, setIsIconChecked] = useState(false)

  const handleButtonClick = (): void => {
    navigator.clipboard
      .writeText(children + "\nCode generated by " + AI_NAME)
      .then(() => setIsIconChecked(true))
      .catch(err => console.error("Failed to copy code:", err))
  }

  useEffect(() => {
    const timeout = setTimeout(() => {
      setIsIconChecked(false)
    }, 2000)

    return () => clearTimeout(timeout)
  }, [isIconChecked])

  return (
    <div className="group relative">
      <Prism language={language} style={atomDark} PreTag="pre" showLineNumbers>
        {children}
      </Prism>
      <Button variant="code" title="Copy code" onClick={handleButtonClick} aria-label="Copy code to clipboard">
        {isIconChecked ? <CheckIcon size={14} /> : <ClipboardIcon size={14} />}
        {isIconChecked ? "Copied " + language : "Copy " + language}
      </Button>
    </div>
  )
})

CodeBlock.displayName = "CodeBlock"
