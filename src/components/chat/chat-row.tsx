"use client"

import React, { FC, useState } from "react"
import { useChatContext } from "@/features/chat/chat-ui/chat-context"
import { ChatRole, ChatSentiment, FeedbackType } from "@/features/chat/models"
import Typography from "../typography"
import Modal from "@/features/ui/modal"
import { Markdown } from "../markdown/markdown"
import AssistantButtons from "@/features/ui/assistant-buttons"
import { AI_NAME } from "@/features/theme/theme-config"
import { CreateUserFeedback } from "@/features/chat/chat-services/chat-message-service"

interface ChatRowProps {
  chatMessageId: string
  name: string
  message: string
  type: ChatRole
  chatThreadId: string
  contentSafetyWarning?: string
  sentiment?: ChatSentiment
  feedback?: string
  reason?: string
}

export const ChatRow: FC<ChatRowProps> = props => {
  const [isIconChecked, setIsIconChecked] = useState(false)
  const [thumbsUpClicked, setThumbsUpClicked] = useState(false)
  const [thumbsDownClicked, setThumbsDownClicked] = useState(false)
  const [feedbackMessage, setFeedbackMessage] = useState("")
  const { isModalOpen, openModal, closeModal } = useChatContext()

  const toggleButton = (buttonId: string): void => {
    switch (buttonId) {
      case "ThumbsUp":
        setThumbsUpClicked(prevState => !prevState)
        setThumbsDownClicked(false)
        setIsIconChecked(false)
        CreateUserFeedback(props.chatMessageId, FeedbackType.None, ChatSentiment.Positive, "", props.chatThreadId)
          .then(res => console.log(res))
          .catch(err => console.error(err))
        break
      case "ThumbsDown":
        setThumbsDownClicked(prevState => !prevState)
        setThumbsUpClicked(false)
        setIsIconChecked(false)
        break
      case "CopyButton":
        setIsIconChecked(prevState => !prevState)
        setThumbsUpClicked(false)
        setThumbsDownClicked(false)
        break
      default:
        break
    }
  }

  const handleCopyButton = (): void => {
    toggleButton("CopyButton")
    const messageWithAttribution = props.message + ("\nText generated by by " + AI_NAME)
    navigator.clipboard
      .writeText(messageWithAttribution)
      .then(() => {
        setFeedbackMessage("Message copied to clipboard.")
      })
      .catch(_err => {
        setFeedbackMessage("Something happened and the message has not been copied.")
      })
      .finally(() => setTimeout(() => setFeedbackMessage(""), 2000))
  }

  const handleThumbsUpClick = (): void => {
    toggleButton("ThumbsUp")
    setFeedbackMessage("Positive feedback submitted.")
    setTimeout(() => setFeedbackMessage(""), 2000)
  }

  const handleThumbsDownClick = (): void => {
    toggleButton("ThumbsDown")
    if (openModal) {
      openModal()
    }
  }

  function handleModalSubmit(_feedback: string, sentiment: string, _reason: string): void {
    if (sentiment === ChatSentiment.Negative) {
      setFeedbackMessage("Negative feedback submitted.")
      setTimeout(() => setFeedbackMessage(""), 2000)
    }
  }

  const handleModalClose = (): void => {
    closeModal?.()
    return
  }

  const safetyWarning = props.contentSafetyWarning ? (
    <div
      className="prose prose-slate bg-alert text-primary dark:prose-invert prose-p:leading-relaxed prose-pre:p-0 max-w-none break-words rounded-md text-center text-sm md:text-base"
      tabIndex={0}
      aria-label="Content Safety Warning"
    >
      {props.contentSafetyWarning}
    </div>
  ) : null

  return (
    <article className="container mx-auto flex flex-col py-1 pb-4">
      <section className="bg-background flex-col gap-4 overflow-hidden rounded-md p-4">
        <header className="flex w-full items-center justify-between">
          <Typography variant="h3" className="text-heading flex-1 capitalize" tabIndex={0}>
            {props.name}
          </Typography>
          {process.env.NODE_ENV === "development" && (
            <Typography variant="h3" className="text-heading flex-1 capitalize" tabIndex={0}>
              {props.chatMessageId}
            </Typography>
          )}
          <Modal
            chatThreadId={props.chatThreadId}
            chatMessageId={props.chatMessageId}
            open={isModalOpen || false}
            onClose={handleModalClose}
            onSubmit={handleModalSubmit}
          />
        </header>
        <div
          className="prose prose-slate text-text dark:prose-invert prose-p:leading-relaxed prose-pre:p-0 max-w-none break-words text-sm md:text-base"
          tabIndex={0}
        >
          <Markdown content={props.message} />
        </div>
        {safetyWarning}
        <div className="sr-only" aria-live="assertive">
          {feedbackMessage}
        </div>
        {props.type === "assistant" && (
          <AssistantButtons
            isIconChecked={isIconChecked}
            thumbsUpClicked={thumbsUpClicked}
            thumbsDownClicked={thumbsDownClicked}
            handleCopyButton={handleCopyButton}
            handleThumbsUpClick={handleThumbsUpClick}
            handleThumbsDownClick={handleThumbsDownClick}
          />
        )}
      </section>
    </article>
  )
}
export default ChatRow
